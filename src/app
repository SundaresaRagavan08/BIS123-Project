import React, { useState, useEffect } from 'react';
import { Users, Calendar, BarChart3, Plus, Clock, CheckCircle, XCircle } from 'lucide-react';

const API_BASE = 'http://localhost:5000/api';

interface Employee {
  id: string;
  name: string;
  email: string;
  department: string;
  position: string;
  role: string;
}

interface LeaveRequest {
  id: string;
  employee_id: string;
  employee_name: string;
  leave_type: string;
  start_date: string;
  end_date: string;
  days_requested: number;
  reason: string;
  status: string;
  approved_by?: string;
  created_at: string;
}

interface LeaveBalance {
  id: string;
  employee_id: string;
  leave_type: string;
  total_days: number;
  used_days: number;
  remaining_days: number;
  year: number;
}

interface DashboardStats {
  total_employees: number;
  pending_requests: number;
  approved_requests: number;
  total_requests: number;
}

function App() {
  const [currentView, setCurrentView] = useState<'dashboard' | 'employees' | 'leave-requests' | 'balances'>('dashboard');
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [leaveRequests, setLeaveRequests] = useState<LeaveRequest[]>([]);
  const [stats, setStats] = useState<DashboardStats>({ total_employees: 0, pending_requests: 0, approved_requests: 0, total_requests: 0 });
  const [selectedEmployee, setSelectedEmployee] = useState<string>('');
  const [leaveBalances, setLeaveBalances] = useState<LeaveBalance[]>([]);
  const [showEmployeeForm, setShowEmployeeForm] = useState(false);
  const [showLeaveForm, setShowLeaveForm] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    department: '',
    position: '',
    role: 'employee'
  });
  const [leaveFormData, setLeaveFormData] = useState({
    employee_id: '',
    leave_type: 'Annual',
    start_date: '',
    end_date: '',
    reason: ''
  });

  // Fetch data functions
  const fetchEmployees = async () => {
    try {
      const response = await fetch(`${API_BASE}/employees`);
      const data = await response.json();
      setEmployees(data);
    } catch (error) {
      console.error('Error fetching employees:', error);
    }
  };

  const fetchLeaveRequests = async () => {
    try {
      const response = await fetch(`${API_BASE}/leave-requests`);
      const data = await response.json();
      setLeaveRequests(data);
    } catch (error) {
      console.error('Error fetching leave requests:', error);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await fetch(`${API_BASE}/dashboard/stats`);
      const data = await response.json();
      setStats(data);
    } catch (error) {
      console.error('Error fetching stats:', error);
    }
  };

  const fetchLeaveBalances = async (employeeId: string) => {
    try {
      const response = await fetch(`${API_BASE}/leave-balances/${employeeId}`);
      const data = await response.json();
      setLeaveBalances(data);
    } catch (error) {
      console.error('Error fetching leave balances:', error);
    }
  };

  useEffect(() => {
    fetchEmployees();
    fetchLeaveRequests();
    fetchStats();
  }, []);

  // Employee CRUD operations
  const handleCreateEmployee = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch(`${API_BASE}/employees`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      
      if (response.ok) {
        fetchEmployees();
        fetchStats();
        setShowEmployeeForm(false);
        setFormData({ name: '', email: '', department: '', position: '', role: 'employee' });
        alert('Employee created successfully!');
      } else {
        const error = await response.json();
        alert(`Error: ${error.error}`);
      }
    } catch (error) {
      console.error('Error creating employee:', error);
    }
  };

  const handleDeleteEmployee = async (id: string) => {
    if (confirm('Are you sure you want to delete this employee?')) {
      try {
        await fetch(`${API_BASE}/employees/${id}`, { method: 'DELETE' });
        fetchEmployees();
        fetchStats();
        alert('Employee deleted successfully!');
      } catch (error) {
        console.error('Error deleting employee:', error);
      }
    }
  };

  // Leave request operations
  const handleCreateLeaveRequest = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch(`${API_BASE}/leave-requests`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(leaveFormData)
      });
      
      if (response.ok) {
        fetchLeaveRequests();
        fetchStats();
        setShowLeaveForm(false);
        setLeaveFormData({ employee_id: '', leave_type: 'Annual', start_date: '', end_date: '', reason: '' });
        alert('Leave request submitted successfully!');
      } else {
        const error = await response.json();
        alert(`Error: ${error.error}`);
      }
    } catch (error) {
      console.error('Error creating leave request:', error);
    }
  };

  const handleApproveRequest = async (id: string) => {
    try {
      await fetch(`${API_BASE}/leave-requests/${id}/approve`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ approved_by: 'HR Manager' })
      });
      fetchLeaveRequests();
      fetchStats();
      alert('Leave request approved!');
    } catch (error) {
      console.error('Error approving request:', error);
    }
  };

  const handleRejectRequest = async (id: string) => {
    try {
      await fetch(`${API_BASE}/leave-requests/${id}/reject`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ approved_by: 'HR Manager' })
      });
      fetchLeaveRequests();
      fetchStats();
      alert('Leave request rejected!');
    } catch (error) {
      console.error('Error rejecting request:', error);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'approved': return 'text-green-600 bg-green-100';
      case 'rejected': return 'text-red-600 bg-red-100';
      default: return 'text-yellow-600 bg-yellow-100';
    }
  };

  const Navigation = () => (
    <nav className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-4 shadow-lg">
      <div className="max-w-7xl mx-auto flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <Calendar className="h-8 w-8" />
          <h1 className="text-2xl font-bold">greytHR Leave Management</h1>
        </div>
        <div className="flex space-x-6">
          <button
            onClick={() => setCurrentView('dashboard')}
            className={`px-4 py-2 rounded-lg transition-colors ${currentView === 'dashboard' ? 'bg-white text-blue-600' : 'hover:bg-blue-500'}`}
          >
            <BarChart3 className="inline h-4 w-4 mr-2" />
            Dashboard
          </button>
          <button
            onClick={() => setCurrentView('employees')}
            className={`px-4 py-2 rounded-lg transition-colors ${currentView === 'employees' ? 'bg-white text-blue-600' : 'hover:bg-blue-500'}`}
          >
            <Users className="inline h-4 w-4 mr-2" />
            Employees
          </button>
          <button
            onClick={() => setCurrentView('leave-requests')}
            className={`px-4 py-2 rounded-lg transition-colors ${currentView === 'leave-requests' ? 'bg-white text-blue-600' : 'hover:bg-blue-500'}`}
          >
            <Clock className="inline h-4 w-4 mr-2" />
            Leave Requests
          </button>
          <button
            onClick={() => setCurrentView('balances')}
            className={`px-4 py-2 rounded-lg transition-colors ${currentView === 'balances' ? 'bg-white text-blue-600' : 'hover:bg-blue-500'}`}
          >
            <Calendar className="inline h-4 w-4 mr-2" />
            Leave Balances
          </button>
        </div>
      </div>
    </nav>
  );

  const Dashboard = () => (
    <div className="p-6">
      <h2 className="text-3xl font-bold text-gray-800 mb-6">Dashboard</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white p-6 rounded-xl shadow-md border-l-4 border-blue-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-600 text-sm">Total Employees</p>
              <p className="text-3xl font-bold text-gray-800">{stats.total_employees}</p>
            </div>
            <Users className="h-12 w-12 text-blue-500" />
          </div>
        </div>
        <div className="bg-white p-6 rounded-xl shadow-md border-l-4 border-yellow-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-600 text-sm">Pending Requests</p>
              <p className="text-3xl font-bold text-gray-800">{stats.pending_requests}</p>
            </div>
            <Clock className="h-12 w-12 text-yellow-500" />
          </div>
        </div>
        <div className="bg-white p-6 rounded-xl shadow-md border-l-4 border-green-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-600 text-sm">Approved Requests</p>
              <p className="text-3xl font-bold text-gray-800">{stats.approved_requests}</p>
            </div>
            <CheckCircle className="h-12 w-12 text-green-500" />
          </div>
        </div>
        <div className="bg-white p-6 rounded-xl shadow-md border-l-4 border-purple-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-600 text-sm">Total Requests</p>
              <p className="text-3xl font-bold text-gray-800">{stats.total_requests}</p>
            </div>
            <BarChart3 className="h-12 w-12 text-purple-500" />
          </div>
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-md p-6">
        <h3 className="text-xl font-semibold text-gray-800 mb-4">Recent Leave Requests</h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-gray-200">
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Employee</th>
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Leave Type</th>
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Dates</th>
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Days</th>
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Status</th>
              </tr>
            </thead>
            <tbody>
              {leaveRequests.slice(0, 5).map((request) => (
                <tr key={request.id} className="border-b border-gray-100">
                  <td className="py-3 px-4">{request.employee_name}</td>
                  <td className="py-3 px-4">{request.leave_type}</td>
                  <td className="py-3 px-4">{request.start_date} to {request.end_date}</td>
                  <td className="py-3 px-4">{request.days_requested}</td>
                  <td className="py-3 px-4">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(request.status)}`}>
                      {request.status.charAt(0).toUpperCase() + request.status.slice(1)}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation />
      
      {currentView === 'dashboard' && <Dashboard />}
      
      {currentView === 'employees' && (
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-3xl font-bold text-gray-800">Employee Management</h2>
            <button
              onClick={() => setShowEmployeeForm(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              <Plus className="h-4 w-4" />
              <span>Add Employee</span>
            </button>
          </div>

          <div className="bg-white rounded-xl shadow-md overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Name</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Email</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Department</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Position</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Role</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {employees.map((employee) => (
                    <tr key={employee.id} className="border-b border-gray-100 hover:bg-gray-50">
                      <td className="py-4 px-6 font-medium text-gray-900">{employee.name}</td>
                      <td className="py-4 px-6 text-gray-600">{employee.email}</td>
                      <td className="py-4 px-6 text-gray-600">{employee.department}</td>
                      <td className="py-4 px-6 text-gray-600">{employee.position}</td>
                      <td className="py-4 px-6">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          employee.role === 'hr' ? 'bg-purple-100 text-purple-800' :
                          employee.role === 'manager' ? 'bg-blue-100 text-blue-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {employee.role.charAt(0).toUpperCase() + employee.role.slice(1)}
                        </span>
                      </td>
                      <td className="py-4 px-6">
                        <button
                          onClick={() => handleDeleteEmployee(employee.id)}
                          className="text-red-600 hover:text-red-800 transition-colors"
                        >
                          <XCircle className="h-4 w-4" />
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {showEmployeeForm && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white p-6 rounded-xl shadow-xl max-w-md w-full mx-4">
                <h3 className="text-xl font-semibold text-gray-800 mb-4">Add New Employee</h3>
                <form onSubmit={handleCreateEmployee} className="space-y-4">
                  <input
                    type="text"
                    placeholder="Full Name"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                  <input
                    type="email"
                    placeholder="Email"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                  <input
                    type="text"
                    placeholder="Department"
                    value={formData.department}
                    onChange={(e) => setFormData({ ...formData, department: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                  <input
                    type="text"
                    placeholder="Position"
                    value={formData.position}
                    onChange={(e) => setFormData({ ...formData, position: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                  <select
                    value={formData.role}
                    onChange={(e) => setFormData({ ...formData, role: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="employee">Employee</option>
                    <option value="manager">Manager</option>
                    <option value="hr">HR</option>
                  </select>
                  <div className="flex space-x-3">
                    <button
                      type="submit"
                      className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-medium transition-colors"
                    >
                      Create Employee
                    </button>
                    <button
                      type="button"
                      onClick={() => setShowEmployeeForm(false)}
                      className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 py-3 rounded-lg font-medium transition-colors"
                    >
                      Cancel
                    </button>
                  </div>
                </form>
              </div>
            </div>
          )}
        </div>
      )}

      {currentView === 'leave-requests' && (
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-3xl font-bold text-gray-800">Leave Requests</h2>
            <button
              onClick={() => setShowLeaveForm(true)}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              <Plus className="h-4 w-4" />
              <span>New Request</span>
            </button>
          </div>

          <div className="bg-white rounded-xl shadow-md overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Employee</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Leave Type</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Start Date</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">End Date</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Days</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Reason</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Status</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {leaveRequests.map((request) => (
                    <tr key={request.id} className="border-b border-gray-100 hover:bg-gray-50">
                      <td className="py-4 px-6 font-medium text-gray-900">{request.employee_name}</td>
                      <td className="py-4 px-6 text-gray-600">{request.leave_type}</td>
                      <td className="py-4 px-6 text-gray-600">{request.start_date}</td>
                      <td className="py-4 px-6 text-gray-600">{request.end_date}</td>
                      <td className="py-4 px-6 text-gray-600">{request.days_requested}</td>
                      <td className="py-4 px-6 text-gray-600 max-w-xs truncate">{request.reason}</td>
                      <td className="py-4 px-6">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(request.status)}`}>
                          {request.status.charAt(0).toUpperCase() + request.status.slice(1)}
                        </span>
                      </td>
                      <td className="py-4 px-6">
                        {request.status === 'pending' && (
                          <div className="flex space-x-2">
                            <button
                              onClick={() => handleApproveRequest(request.id)}
                              className="text-green-600 hover:text-green-800 transition-colors"
                            >
                              <CheckCircle className="h-4 w-4" />
                            </button>
                            <button
                              onClick={() => handleRejectRequest(request.id)}
                              className="text-red-600 hover:text-red-800 transition-colors"
                            >
                              <XCircle className="h-4 w-4" />
                            </button>
                          </div>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {showLeaveForm && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white p-6 rounded-xl shadow-xl max-w-md w-full mx-4">
                <h3 className="text-xl font-semibold text-gray-800 mb-4">Submit Leave Request</h3>
                <form onSubmit={handleCreateLeaveRequest} className="space-y-4">
                  <select
                    value={leaveFormData.employee_id}
                    onChange={(e) => setLeaveFormData({ ...leaveFormData, employee_id: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    required
                  >
                    <option value="">Select Employee</option>
                    {employees.map((emp) => (
                      <option key={emp.id} value={emp.id}>{emp.name}</option>
                    ))}
                  </select>
                  <select
                    value={leaveFormData.leave_type}
                    onChange={(e) => setLeaveFormData({ ...leaveFormData, leave_type: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  >
                    <option value="Annual">Annual Leave</option>
                    <option value="Sick">Sick Leave</option>
                    <option value="Personal">Personal Leave</option>
                  </select>
                  <input
                    type="date"
                    value={leaveFormData.start_date}
                    onChange={(e) => setLeaveFormData({ ...leaveFormData, start_date: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    required
                  />
                  <input
                    type="date"
                    value={leaveFormData.end_date}
                    onChange={(e) => setLeaveFormData({ ...leaveFormData, end_date: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    required
                  />
                  <textarea
                    placeholder="Reason for leave"
                    value={leaveFormData.reason}
                    onChange={(e) => setLeaveFormData({ ...leaveFormData, reason: e.target.value })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    rows={3}
                  />
                  <div className="flex space-x-3">
                    <button
                      type="submit"
                      className="flex-1 bg-green-600 hover:bg-green-700 text-white py-3 rounded-lg font-medium transition-colors"
                    >
                      Submit Request
                    </button>
                    <button
                      type="button"
                      onClick={() => setShowLeaveForm(false)}
                      className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 py-3 rounded-lg font-medium transition-colors"
                    >
                      Cancel
                    </button>
                  </div>
                </form>
              </div>
            </div>
          )}
        </div>
      )}

      {currentView === 'balances' && (
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-3xl font-bold text-gray-800">Leave Balances</h2>
            <select
              value={selectedEmployee}
              onChange={(e) => {
                setSelectedEmployee(e.target.value);
                if (e.target.value) fetchLeaveBalances(e.target.value);
              }}
              className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Select Employee</option>
              {employees.map((emp) => (
                <option key={emp.id} value={emp.id}>{emp.name}</option>
              ))}
            </select>
          </div>

          {selectedEmployee && leaveBalances.length > 0 && (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {leaveBalances.map((balance) => (
                <div key={balance.id} className="bg-white p-6 rounded-xl shadow-md">
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">{balance.leave_type} Leave</h3>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Total Days:</span>
                      <span className="font-medium">{balance.total_days}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Used Days:</span>
                      <span className="font-medium text-red-600">{balance.used_days}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Remaining:</span>
                      <span className="font-medium text-green-600">{balance.remaining_days}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div
                        className="bg-blue-600 h-3 rounded-full transition-all duration-300"
                        style={{ width: `${(balance.used_days / balance.total_days) * 100}%` }}
                      ></div>
                    </div>
                    <p className="text-sm text-gray-500 text-center">
                      {Math.round((balance.used_days / balance.total_days) * 100)}% used
                    </p>
                  </div>
                </div>
              ))}
            </div>
          )}

          {selectedEmployee && leaveBalances.length === 0 && (
            <div className="bg-white p-8 rounded-xl shadow-md text-center">
              <p className="text-gray-500">No leave balance data found for selected employee.</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default App;